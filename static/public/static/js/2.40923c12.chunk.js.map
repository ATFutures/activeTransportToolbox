{"version":3,"sources":["../static/js/2.40923c12.chunk.js","components/About.jsx","../node_modules/marked/lib/marked.js"],"names":["webpackJsonp","1121","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_react_router_dom__","__WEBPACK_IMPORTED_MODULE_2_marked__","__WEBPACK_IMPORTED_MODULE_2_marked___default","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","About","_React$Component","this","_this","getPrototypeOf","state","_this2","fetch","then","response","console","log","text","setState","markdown","marked","a","createElement","style","padding","href","dangerouslySetInnerHTML","__html","React","Component","withRouter","1306","exports","global","root","Lexer","options","tokens","links","defaults","rules","block","normal","pedantic","gfm","tables","InlineLexer","inline","renderer","Renderer","Error","breaks","TextRenderer","Parser","token","escape","html","encode","escapeTest","test","replace","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","toLowerCase","charAt","String","fromCharCode","parseInt","substring","edit","regex","opt","source","name","val","getRegex","RegExp","cleanUrl","sanitize","base","prot","decodeURIComponent","e","indexOf","originIndependentUrl","resolveUrl","encodeURI","baseUrls","rtrim","slice","noop","merge","obj","arguments","hasOwnProperty","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","splice","push","trim","c","invert","suffLen","currChar","substr","src","callback","toString","pending","highlight","lex","done","err","out","parse","type","lang","code","message","silent","newline","fences","hr","heading","nptable","blockquote","list","def","table","lheading","paragraph","_label","_title","bullet","item","_tag","_comment","top","next","loose","cap","bull","b","listStart","listItems","t","space","tag","l","isordered","istask","ischecked","exec","depth","header","align","ordered","start","smartLists","join","undefined","task","checked","pre","sanitizer","title","charCodeAt","autolink","url","link","reflink","nolink","strong","em","br","del","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","prevCapZero","mangle","inLink","inRawBlock","outputLink","escapes","codespan","smartypants","image","Math","random","langPrefix","quote","level","raw","headerIds","headerPrefix","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","baseUrl","inlineText","reverse","tok","pop","peek","parseText","cell","j","&","<",">","\"","'","setOptions","getDefaults","parser","lexer","inlineLexer","window"],"mappings":"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","file":"static/js/2.40923c12.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 1121:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_router_dom__ = __webpack_require__(181);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_marked__ = __webpack_require__(1306);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_marked___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_marked__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var About=function(_React$Component){_inherits(About,_React$Component);function About(props){_classCallCheck(this,About);var _this=_possibleConstructorReturn(this,(About.__proto__||Object.getPrototypeOf(About)).call(this,props));_this.state={};return _this;}_createClass(About,[{key:'componentDidMount',value:function componentDidMount(){var _this2=this;var readmePath='https://raw.githubusercontent.com/ATFutures/activeTransportToolbox/master/README.md';fetch(readmePath).then(function(response){console.log(response);return response.text();}).then(function(text){_this2.setState({markdown:__WEBPACK_IMPORTED_MODULE_2_marked___default()(text)});});}},{key:'render',value:function render(){var markdown=this.state.markdown;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('section',{style:{padding:'5%'}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('h3',null,'README from ',__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('a',{href:'https://github.com/ATFutures/activeTransportToolbox'},'github'),' repo'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('article',{dangerouslySetInnerHTML:{__html:markdown}}));}}]);return About;}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);// thanks to https://stackoverflow.com/a/42124328/2332101\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(__WEBPACK_IMPORTED_MODULE_1_react_router_dom__[\"e\" /* withRouter */])(About));\n\n/***/ }),\n\n/***/ 1306:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\s.])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\s.])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])[\\s\\S]*?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|$', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|$')\n    .getRegex()\n});\n\ninline.gfm.url = edit(inline.gfm.url)\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.40923c12.chunk.js","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport marked from 'marked'\n\nclass About extends React.Component {\n    constructor (props) {\n        super (props)\n        this.state = {\n\n        }\n    }\n    componentDidMount() {\n        const readmePath = 'https://raw.githubusercontent.com/ATFutures/activeTransportToolbox/master/README.md';\n        fetch(readmePath) \n          .then(response => {\n              console.log(response);\n              \n              return response.text()\n          })\n          .then(text => {\n              this.setState({\n                  markdown: marked(text)\n              })\n          })\n    }\n\n    render () {\n        const { markdown } = this.state\n        return (\n            <section style={{padding: '5%'}}>\n                <h3>README from <a href='https://github.com/ATFutures/activeTransportToolbox'>github</a> repo</h3>\n                <article dangerouslySetInnerHTML={{__html: markdown}}></article>\n            </section>\n        )\n    }\n}\n\n// thanks to https://stackoverflow.com/a/42124328/2332101\nexport default withRouter(About);\n\n\n// WEBPACK FOOTER //\n// ./src/components/About.jsx","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\s.])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\s.])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])[\\s\\S]*?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|$', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|$')\n    .getRegex()\n});\n\ninline.gfm.url = edit(inline.gfm.url)\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/marked/lib/marked.js\n// module id = 1306\n// module chunks = 2"],"sourceRoot":""}